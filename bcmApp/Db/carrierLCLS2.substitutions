########################################################################################################################
# Summary:             Carrier substitutions file to generate PVs for CPSW registers
# Author:              C. Ford <caf@slac.stanford.edu>
# Date:                21-mar-2017 
# YAML config version: AmcCarrierBcm_00000018
########################################################################################################################

########################################################################################################################
# Macros:
#   P,R: The PV name as $(P):$(R)
#   DESC, PINI, SCAN, NELM, etc.: The same fields on the records
#   PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd
#   PARAM: The asyn paramter name. It must be defined in the dictionary file and assigned to a register
########################################################################################################################

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "RegisterIn.template" { pattern
{ P,          R,              DESC,                      PINI,       SCAN,     PORT,  EGU, PARAM         }
{ $(P), DeviceDna,      "Xilinx Device DNA",            "YES",  "Passive",  $(PORT),   "", DeviceDna     }
{ $(P), FpgaVersion,    "FPGA Firmware Version Number", "YES",  "Passive",  $(PORT),   "", FpgaVersion   }
{ $(P), UpTimeCnt,      "Seconds since last reset",     "YES",  "1 second", $(PORT),  "s", UpTimeCnt     }
{ $(P), DeviceId,       "Device Identification",        "YES",  "Passive",  $(PORT),   "", DeviceId      }
{ $(P), ServerRemotePort,  "big-Endian configuration",  "YES",  "1 second", $(PORT),   "", ServerRemotePort }
{ $(P), SrvRemoteIp,    "big-Endian configuration",     "YES",  "1 second", $(PORT),   "", ServerRemoteIp }
# BSA status
{ $(P), SofCount,       "",                             "YES",  "1 second", $(PORT),   "", sofCount      }
{ $(P), EofCount,       "",                             "YES",  "1 second", $(PORT),   "", eofCount      }
{ $(P), CrcErrCount,    "",                             "YES",  "1 second", $(PORT),   "", CrcErrCount   }
{ $(P), RxClkCount,     "",                             "YES",  "1 second", $(PORT),   "", RxClkCount    }
{ $(P), RxRstCount,     "",                             "YES",  "1 second", $(PORT),   "", RxRstCount    }
{ $(P), RxDecErrCount,  "",                             "YES",  "1 second", $(PORT),   "", RxDecErrCount }
{ $(P), RxDspErrCount,  "",                             "YES",  "1 second", $(PORT),   "", RxDspErrCount }
#{ $(P), RxLinkUp,       "",                             "YES",  "1 second", $(PORT),   "",    RxLinkUp      }
# CmnConfig status
{ $(P), TmitTimeUp,     "",                             "YES",  "1 second", $(PORT),   "", TmitTimeUp    }
{ $(P), TmitTimeLow,    "",                             "YES",  "1 second", $(PORT),   "", TmitTimeLow   }
{ $(P), TmitStatus0,    "",                             "YES",  "1 second", $(PORT),   "", TmitStatus0   }
{ $(P), TmitStatus1,    "",                             "YES",  "1 second", $(PORT),   "", TmitStatus1   }
{ $(P), TmitTmit0,      "",                             "YES",  "1 second", $(PORT),   "", TmitTmit0     }
{ $(P), TmitTmit1,      "",                             "YES",  "1 second", $(PORT),   "", TmitTmit1     }
{ $(P), StatusOfBsa0,   "",                             "YES",  "1 second", $(PORT),   "", StatusOfBsa0  }
{ $(P), StatusOfBsa1,   "",                             "YES",  "1 second", $(PORT),   "", StatusOfBsa1  }
#MPS debugging 
{ $(P), BpTimAlignErrCnt,   "",                             "YES",  "1 second", $(PORT),   "",   BpTimAlignErrCnt }
{ $(P), BpTmitIntMax,       "",                             "YES",  "1 second", $(PORT),   "",   BpTmitIntMax     }
{ $(P), BpTimingIntMax,     "",                             "YES",  "1 second", $(PORT),   "",   BpTimingIntMax   }
{ $(P), BpTimingInt,        "",                             "YES",  "1 second", $(PORT),   "",   BpTimingInt      }
{ $(P), CntDiag,            "",                             "YES",  "1 second", $(PORT),   "",   CntDiag          }
{ $(P), CntDiagMin,         "",                             "YES",  "1 second", $(PORT),   "",   CntDiagMin       }
{ $(P), CntDiagMax,         "",                             "YES",  "1 second", $(PORT),   "",   CntDiagMax       }
}

# Array of register
file "RegisterInAlarms.template" { pattern
{ P,           R, DESC, NELM,    PINI,       SCAN,     PORT,  LOLO, HIHI,    LLSV,       HHSV,   PARAM     }
{ $(P), RxLinkUp,   "",   20,   "YES",  "1 second",  $(PORT),    0,    1, "MAJOR", "NO_ALARM",  RxLinkup   }
}

# Array of register
file "RegisterArrayIn.template" { pattern
{ P,          R,                         DESC, NELM,    PINI,   SCAN,       PORT,     PARAM     }
{ $(P), GitHash,  "FPGA Firmware Git HashTag",   20,   "YES",  "Passive",  $(PORT),   GitHash   }
}

# Array of 8-bit register as a string
file "RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,  PARAM       }
# Shared
{ $(P), BuildStamp,     "Firmware Build String",       256,     "YES",  "Passive",  $(PORT),  BuildStamp }
}

# ENUM register
file "RegisterEnumBIn.template" { pattern
{ P,        R,              DESC,                    PINI,   ZNAM,       ONAM,       SCAN,      PORT, PARAM     }
}

#======================================
# Register with ScalVal interfaces
#======================================

file "RegisterOut.template" { pattern
{ P,        R,              DESC,                       PINI,   SCAN,       PORT,        PARAM         }
{ $(P), ScratchPad,     "Register to test R/W",          "NO",   "Passive",  $(PORT),    ScratchPad    }
# BSA
{ $(P), RxPolarity,     "",                              "NO",   "Passive",  $(PORT),    RxPolarity    }
{ $(P), PhaseTarget,    "",                              "NO",   "Passive",  $(PORT),    PhaseTarget   }
#ATCA Specific
{ $(P), AppType,        "",                             "NO",  "Passive",  $(PORT),    AppType       }
{ $(P), SelBpm,         "",                             "NO",  "Passive",  $(PORT),    SelBpm        }
{ $(P), TreshTmit,      "",                             "NO",  "Passive",  $(PORT),    TreshTmit     }
{ $(P), CalibEnable,    "",                             "YES",  "Passive",  $(PORT),    CalibEnable   } 
{ $(P), DiagnosticDelay,"",                             "NO",  "Passive",  $(PORT),    DiagnosticDelay } 
}

file "RegisterOutRBV.template" { pattern
{ P,           R,                DESC,                  PINI,      SCAN,        PORT,  PARAM       }
# Shared
{ $(P), ScratchPadRBV,     "Register to test R/W",                   "YES",  "1 second",  $(PORT),    ScratchPad }
# BSA
{ $(P), ClkSelRBV,         ""                                           "YES",  "1 second",  $(PORT),     ClkSel        }
{ $(P), RxPolarityRBV,     ""                                           "YES",  "1 second",  $(PORT),     RxPolarity    }
{ $(P), PhaseTargetRBV,    ""                                           "YES",  "1 second",  $(PORT),     PhaseTarget   }
#ATCA Specific
{ $(P), AppTypeRBV,        "",                                          "NO",   "1 second",  $(PORT),     AppType       }
{ $(P), SelBpmRBV,         "",                                          "NO",   "1 second",  $(PORT),     SelBpm        }
{ $(P), TreshTmitRBV,      "",                                          "NO",   "1 second",  $(PORT),     TreshTmit     }
{ $(P), CalibEnableRBV,    "",                                          "NO",   "1 second",  $(PORT),     CalibEnable   }
#MPS debugging 
{ $(P), DiagnosticDelayRBV,    "",                             "YES",  "1 second", $(PORT),      DiagnosticDelay  }
#
}

# ENUM register
file "RegisterEnumBOut.template" { pattern
{ P,        R,              DESC,        PINI,   ZNAM,        ONAM,     SCAN,       PORT, PARAM     }
}

file "RegisterEnumBOutRBV.template" { pattern
{ P,        R,              DESC,         PINI,    ZNAM,        ONAM,     SCAN,        PORT, PARAM     }
}

#======================================
# Register with DoubleVal_RO interfaces
#======================================

file "RegisterDoubleIn.template" { pattern
{ P,              R,            DESC,                         PINI,   SCAN,        PORT,   EGU,    PARAM    }
}

#======================================
# Register with DoubleVal interfaces
#======================================

file "RegisterDoubleOut.template" { pattern
{ P,              R,            DESC,                         PINI,  SCAN,        PORT,   EGU,    PARAM   }
}

file "RegisterDoubleOutRBV.template" { pattern
{ P,              R,            DESC,                         PINI,   SCAN,       PORT,   EGU,    PARAM   }
}

#======================================
# Register with Command interfaces
#======================================
file "RegisterCommand.template" { pattern
{ P,            R,            DESC,                            PINI,   SCAN,       PORT,   PARAM   }
}


#======================================
# Register with Stream interfaces
#======================================

file "RegisterStream.template" {pattern
{ P,            R,          DESC,               NELM,       PINI,   PORT,   PARAM       }
}

# For Stream interfaces, an additional parameter is automatically created
# and the name is generated adding ":16" to the original parameter name
# This gives access to the same stream data, but as 16-bit words which
# is the case for ADC samples for example. Note that the NELM is 2x

file "RegisterStream16.template" {pattern
{ P,            R,          DESC,                           NELM,        PINI,  PORT,  PARAM         }
}
