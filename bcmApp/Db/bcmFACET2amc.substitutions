########################################################################################################################
# Summary:             BCM substitutions file to generate PVs for CPSW registers
# Author:              C. Ford <caf@slac.stanford.edu>
# Date:                13-mar-2017
# YAML config version: AmcCarrierBcm_00000018
########################################################################################################################

########################################################################################################################
# Macros:
#   P,R: The PV name as P:R
#   DESC, PINI, SCAN, NELM, etc.: The same fields on the records
#   PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd
#   PARAM: The asyn paramter name. It must be defined in the dictionary file and assigned to a register
#   AMC: The AMC hardware slot (0 or 1)
########################################################################################################################

#======================================
# Register with ScalVal interfaces
#======================================

file "RegisterOut.template" { pattern
{ P,        R,              DESC,                                       PINI,   SCAN,       PORT,  PARAM       }
}


file "RegisterOut.template" { pattern
{ P,        R,              DESC,                                       PINI,   SCAN,       PORT,  PARAM       }
{ $(P), Mode,           "BCM mode"                                "NO",   "Passive",  $(PORT),    AMC$(AMC):Mode }
{ $(P), DacSrs,         "Simulated or Real DAC Source"            "NO",   "Passive",  $(PORT),    DacSrs }
}


file "RegisterOutRBV.template" { pattern
{ P,           R,                DESC,                                     PINI,   SCAN,        PORT,  PARAM       }
{ $(P), DacSrsRBV,         "Simulated or Real DAC Source"            "YES",  "1 second",  $(PORT),    DacSrs }
}


# Array of 8-bit register as a string
file "RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,  PARAM       }
}

# ENUM register
file "RegisterEnumBIn.template" { pattern
{ P,        R,              DESC,                    PINI,   ZNAM,       ONAM,       SCAN,      PORT, PARAM     }
}

#======================================
# Register with DoubleVal_RO interfaces
#======================================

file "RegisterDoubleInLimits.template" { pattern
{ P,        R,       HOPR,   LOPR,   LOLO,    LOW,   HIGH,   HIHI   }
}



#======================================
# Register with Command interfaces
#======================================
file "RegisterCommand.template" { pattern
{ P,            R,            DESC,                            PINI,   SCAN,       PORT,   PARAM   }
}

#======================================
# Register with Calc interfaces
#======================================
file "RegisterCalc.template" { pattern
{ P,          R,              DESC,                           	SCAN,		EGU,  		PARAM 				}
}
